/*
Gustavo Sanches Vieira 602183
Iago Eduardo Gonzales Valderramas 555231
Igor Vinicius Medes Cuellar 6070622
Lucas Vela Moreno Dalan 604194
Miguel Francisco Bossoni Barreto 603945
*/

const mqtt = require('mqtt');
const uuid = require('uuid');

const mqttBroker = 'mqtt://localhost'; // Substitua pelo URL do seu broker MQTT
const mqttTopic = 'localizacao'; // Tópico MQTT para publicar as mensagens

// Função para gerar dados de localização aleatórios com ID único usando UUID
function gerarDadosLocalizacao() {
  const id = uuid.v4(); // Gera um ID único usando UUID v4
  const latitude = (Math.random() * 180) - 90; // Latitude aleatória entre -90 e 90
  const longitude = (Math.random() * 360) - 180; // Longitude aleatória entre -180 e 180
  return { id, latitude, longitude };
}

// Conectar ao broker MQTT
const client = mqtt.connect(mqttBroker);

// Publicar dados de localização a cada 5 segundos
setInterval(() => {
  const dadosLocalizacao = gerarDadosLocalizacao();
  client.publish(mqttTopic, JSON.stringify(dadosLocalizacao));
  console.log('Dados de localização publicados:', dadosLocalizacao);
}, 5000); // Publica a cada 5 segundos (5000 milissegundos)

// Lidar com eventos de conexão MQTT
client.on('connect', () => {
  console.log('Conectado ao broker MQTT');
});

client.on('error', (error) => {
  console.error('Erro de conexão MQTT:', error);
});

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

const mqtt = require('mqtt');
const amqp = require('amqplib/callback_api');

// Configurações MQTT
const mqttBroker = 'mqtt://localhost'; // Substitua pelo URL do seu broker MQTT
const mqttTopic = 'localizacao'; // Tópico MQTT para receber as mensagens

// Configurações do RabbitMQ
const rabbitMQUrl = 'amqp://localhost'; // Substitua pelo URL do seu servidor RabbitMQ
const queueName = 'localizacaoQueue'; // Nome da fila RabbitMQ para enviar os dados

// Conectando ao broker MQTT
const client = mqtt.connect(mqttBroker);

// Conectando ao RabbitMQ e criando a fila
amqp.connect(rabbitMQUrl, (error, connection) => {
  if (error) {
    throw error;
  }

  connection.createChannel((channelError, channel) => {
    if (channelError) {
      throw channelError;
    }

    // Declarar a fila
    channel.assertQueue(queueName, {
      durable: true
    });

    // Lógica para lidar com mensagens MQTT
    client.on('connect', () => {
      console.log('Conectado ao broker MQTT');
      client.subscribe(mqttTopic);
    });

    client.on('message', (topic, message) => {
      // Convertendo a mensagem do formato JSON
      const data = JSON.parse(message.toString());

      // Enviando dados para a fila RabbitMQ
      channel.sendToQueue(queueName, Buffer.from(JSON.stringify({
        id: data.id,
        latitude: data.latitude,
        longitude: data.longitude
      })));

      console.log('Dados enviados com sucesso para a fila RabbitMQ:', data);
    });

    // Lidando com erros MQTT
    client.on('error', (error) => {
      console.error('Erro de conexão MQTT:', error);
    });
  });
});
